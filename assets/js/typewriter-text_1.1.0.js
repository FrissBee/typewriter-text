"use strict";(()=>{const t=document.createElement("template");t.innerHTML=`
    <style>
      .d-flex { display: flex; }
      .cursor { height: 100%; width: 1px; background: #757575; margin-left: 2px; animation: blink 700ms infinite; display: none }
      @keyframes blink { 0%, 49.9% { opacity: 0; } 50%, 100% { opacity: 1; } }
    </style>
    <div part="container-typewriter-text">
      <div class="d-flex container-slot">
        <div><slot></slot></div>
        <div><div class="cursor" style=""></div></div>
      </div>
    </div>`;class e extends HTMLElement{#root=null;#containerSlot=null;#slot=null;#cursor=null;#element=null;#textArray=[];#interval=null;#intervalTime=200;#isEndless=!1;#isReverse=!1;#isIndividual=!1;#holdLine=0;#delayTime=0;#arrayIndex=0;#stringLength=0;#stringIndex=0;#holdLineIndex=0;#isGoReverse=!1;constructor(){super(),this.#root=this.attachShadow({mode:"open"}),this.#root.appendChild(t.content.cloneNode(!0)),this.#containerSlot=this.#root.querySelector(".container-slot"),this.#slot=this.#root.querySelector("slot"),this.#cursor=this.#root.querySelector(".cursor")}static get observedAttributes(){return["displayed-text","is-endless","interval-time","hold-line","delay-time","is-individual","is-cursor","style-cursor","is-reverse","set-position"]}attributeChangedCallback(t,e,s){"displayed-text"===t?this.#textArray.push(s):"is-endless"===t?this.#isEndless=!0:"interval-time"===t?this.#intervalTime=Number(s):"hold-line"===t?this.#holdLine=Number(s):"delay-time"===t?this.#delayTime=Number(s):"is-individual"===t?this.#isIndividual=!0:"is-cursor"===t?this.#cursor.style.display="block":"style-cursor"===t?this.#cursor.style="display: "+this.#cursor.style.display+"; "+s:"is-reverse"===t?this.#isReverse=!0:"set-position"===t&&(this.#containerSlot.style.justifyContent=s)}connectedCallback(){this.#element=this.#slot.assignedElements()[0],this.hasAttribute("displayed-text")&&this.#setTypeTextWithDelayTimeout()}#setTypeTextWithDelayTimeout(){setTimeout(()=>{this.#typeText()},this.#delayTime)}#setTextInterval(){this.#interval=setInterval(()=>{!1===this.#isEndless?this.#setCharsIfIsNotEndless():this.#setCharsIfIsEndless()},this.#intervalTime)}#typeText(){this.#stringLength=this.#textArray[this.#arrayIndex].length,this.#setTextInterval()}#setCharsIfIsNotEndless(){this.#stringIndex<this.#stringLength?this.#setCharsIfIsIndividualOrNot():this.#holdLineIndex<=this.#holdLine?this.#holdLineIndex++:(this.#arrayIndex++,this.#arrayIndex===this.#textArray.length?clearInterval(this.#interval):this.#resetForSetText())}#setCharsIfIsEndless(){this.#stringIndex<this.#stringLength&&!1===this.#isGoReverse?this.#setCharsIfIsIndividualOrNot():!1===this.#isGoReverse?this.#holdLineIndex<=this.#holdLine?this.#holdLineIndex++:!1===this.#isReverse?(this.#arrayIndex=this.#setArrayIndex(this.#textArray.length),this.#resetForSetText()):(this.#isGoReverse=!0,this.#withReverse()):0!==this.#stringIndex?this.#withReverse():(this.#isGoReverse=!1,this.#arrayIndex=this.#setArrayIndex(this.#textArray.length),this.#resetForSetText())}#setCharsIfIsIndividualOrNot(){!1===this.#isIndividual?this.#setChar():this.#setCharIndividual()}#setChar(){this.#element.innerHTML+=this.#textArray[this.#arrayIndex][this.#stringIndex],!1===this.#isGoReverse&&this.#stringIndex++}#setCharIndividual(){var t=this.#textArray[this.#arrayIndex][this.#stringIndex];this.#element.innerHTML+=t.char,""!==t.intervalTime.trim()&&(this.#intervalTime=Number(t.intervalTime),clearInterval(this.#interval),this.#setTextInterval()),!1===this.#isGoReverse&&this.#stringIndex++}#withReverse(){if(--this.#stringIndex,0==this.#isIndividual)this.#element.innerHTML=this.#textArray[this.#arrayIndex].slice(0,this.#stringIndex);else{let e="";for(let t=0;t<this.#stringIndex;t++)e+=this.#textArray[this.#arrayIndex][t].char;this.#element.innerHTML=e}}#setArrayIndex=t=>this.#arrayIndex<t-1?this.#arrayIndex+1:0;#resetHoldElemStrIdx(){this.#holdLineIndex=0,this.#element.innerHTML="",this.#stringIndex=0}#resetForSetText(){this.#resetHoldElemStrIdx(),this.#stringLength=this.#textArray[this.#arrayIndex].length}#resetForMultiLines(){clearInterval(this.#interval),this.#arrayIndex=0,this.#stringLength=0,this.#resetHoldElemStrIdx()}setMultipleLines(t){this.#resetForMultiLines(),this.#textArray=t,this.#setTypeTextWithDelayTimeout()}}customElements.define("typewriter-text",e)})();